// Generated by CoffeeScript 1.7.1
(function() {
  var IS, chai, obj,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  IS = require("./../lib/isf.js");

  chai = require("chai");

  obj = IS.Object;

  chai.should();

  describe("Barebone Object", function() {
    it("should clone properly", function() {
      var inst, newobj;
      newobj = obj.clone();
      newobj.extend({
        "Chestie": "Naspa"
      });
      newobj.include({
        potato: [
          {
            "chestie": "naspa"
          }, "barabula", "cartof"
        ]
      });
      inst = new newobj;
      newobj.Chestie.should.equal("Naspa");
      inst.should.have.property("potato");
      newobj.should.not.have.property("potato");
      inst.potato.should.contain("barabula");
      inst.potato.should.contain("cartof");
      inst.potato.should.have.deep.property("[0].chestie", "naspa");
      obj.should.not.have.property("Chestie");
      return (new obj).should.not.have.property("potato");
    });
    it("Should clone other objects properly", function() {
      var newobject, object;
      object = (function() {
        function object() {}

        object.prop = "Sabin";

        return object;

      })();
      newobject = obj.clone(object);
      newobject.prop = "Irina";
      object.prop.should.equal("Sabin");
      newobject.prop.should.equal("Irina");
      return object.prop.should.not.equal(newobject.prop);
    });
    it("Should Extend and Include properly", function() {
      var Mixin, Primitive;
      Primitive = (function(_super) {
        __extends(Primitive, _super);

        function Primitive() {
          return Primitive.__super__.constructor.apply(this, arguments);
        }

        Primitive.classprop1 = "Class Prop Primitive";

        Primitive.classprop2 = function() {
          return "Primitive";
        };

        Primitive.prototype.instprop1 = "Instance Prop Primitive";

        Primitive.prototype.instprop2 = function() {
          return "Instance Primitive";
        };

        return Primitive;

      })(IS.Object);
      Mixin = (function() {
        function Mixin() {}

        Mixin.classprop1 = "Mixin Object";

        Mixin.prototype.instprop2 = function() {
          return "Mixin Instance";
        };

        return Mixin;

      })();
      Primitive.classprop1.should.equal("Class Prop Primitive");
      Primitive.prototype.instprop2().should.equal("Instance Primitive");
      Mixin.classprop1.should.equal("Mixin Object");
      return Mixin.prototype.instprop2().should.equal("Mixin Instance");
    });
    return it("Should Extend and Include properly", function() {
      var Mixin, Primitive;
      Primitive = (function(_super) {
        __extends(Primitive, _super);

        function Primitive() {
          return Primitive.__super__.constructor.apply(this, arguments);
        }

        Primitive.classprop1 = "Class Prop Primitive";

        Primitive.classprop2 = function() {
          return "Primitive";
        };

        Primitive.prototype.instprop1 = "Instance Prop Primitive";

        Primitive.prototype.instprop2 = function() {
          return "Instance Primitive";
        };

        return Primitive;

      })(IS.Object);
      Mixin = (function() {
        function Mixin() {}

        Mixin.classprop1 = "Mixin Object";

        Mixin.prototype.instprop2 = function() {
          return "Mixin Instance";
        };

        return Mixin;

      })();
      Primitive.extend(Mixin);
      Primitive.include(Mixin.prototype);
      Primitive.classprop1.should.equal("Mixin Object");
      Primitive.prototype.instprop2().should.equal("Mixin Instance");
      Primitive.classprop2 = function() {
        return this.prototype.instprop1;
      };
      Primitive.classprop2().should.equal("Instance Prop Primitive");
      Primitive.classprop2 = function() {
        return this["super"];
      };
      return Primitive.classprop2().classprop1.should.equal("Class Prop Primitive");
    });
  });

}).call(this);
