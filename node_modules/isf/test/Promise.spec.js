// Generated by CoffeeScript 1.7.1
(function() {
  var IS, Promise, chai;

  IS = require("./../lib/isf.js");

  chai = require("chai");

  Promise = IS.Promise;

  chai.should();

  describe("Promise", function() {
    it("should constuct properly", function() {
      var x, y;
      x = new Promise();
      x.callbacks.length.should.equal(0);
      y = new Promise(x);
      return y.should.equal(x);
    });
    it("should run fine", function(done) {
      var x;
      x = new Promise();
      x.then(function(val) {
        val.should.equal(5);
        return done();
      });
      return x.resolve(5);
    });
    it("should chain properly", function(done) {
      var op, op1, op2, op3;
      op = function(val) {
        var x;
        x = new Promise(this);
        setTimeout(function() {
          return x.resolve(val + 1);
        }, 5);
        return x;
      };
      op1 = op;
      op2 = op;
      op3 = op;
      return op1(4).then(op2).then(op3).then(function(result) {
        result.should.equal(7);
        return done();
      });
    });
    it("should get errors right", function(done) {
      var errtick, op1, op2, op3, ope1, ope2, ope3, tick;
      tick = function(val) {
        var x;
        x = new Promise(this);
        setTimeout(function() {
          if (val === 3) {
            return x.reject(val);
          } else {
            return x.resolve(val + 1);
          }
        }, 1);
        return x;
      };
      errtick = function(val) {
        var x;
        x = new Promise(this);
        setTimeout(function() {
          return x.reject(val);
        }, 1);
        return x;
      };
      op1 = tick;
      op2 = tick;
      op3 = tick;
      ope1 = errtick;
      ope2 = errtick;
      ope3 = errtick;
      return op1(1).then(op2, ope2).then(op3, ope3).then((function() {}), (function(val) {
        val.should.equal(3);
        return done();
      }));
    });
    it("should pass an every-day result", function(done) {
      var reject, test;
      test = function(value) {
        var x;
        x = new Promise(this);
        setTimeout(function() {
          if (value % 2 === 0) {
            return x.reject(new Error("It works"), value);
          } else {
            return x.resolve(value * 3);
          }
        }, 15);
        return x;
      };
      reject = function(error, value) {
        var x;
        x = new Promise(this);
        setTimeout(function() {
          return x.reject(error, value);
        }, 1);
        return x;
      };
      return test(1).then(test, reject).then(function(val) {
        val.should.equal(9);
        return test(2).then(test, reject).then(test, reject).then((function() {}), function(error, value) {
          error.message.should.equal("It works");
          value.should.equal(2);
          return done();
        });
      });
    });
    it("Should progress nicely", function(done) {
      var number, op, op1, op2, op3, prog;
      op = function(val) {
        var x;
        x = new Promise(this);
        x.progress(1);
        setTimeout(function() {
          x.progress(2);
          return x.resolve(val + 1);
        }, 5);
        return x;
      };
      number = 0;
      prog = function(val) {
        return number += val;
      };
      op1 = op;
      op2 = op;
      op3 = op;
      return op1(4).then(op2, null, prog).then(op3, null, prog).then(function(result) {
        result.should.equal(7);
        number.should.equal(5);
        return done();
      });
    });
    return it("Should work with faster resolving", function(done) {
      var op, op1, op2, op3, prom, tick, value;
      op = function(val) {
        var x;
        x = new Promise(this);
        val.should.equal(value + tick);
        tick++;
        x.resolve(val + 1);
        return x;
      };
      op1 = op2 = op3 = op;
      tick = 0;
      value = 1;
      prom = op1(value);
      return setTimeout(function() {
        return prom.then(op2).then(op3).then(function(val) {
          val.should.equal(4);
          return done();
        });
      }, 200);
    });
  });

}).call(this);
