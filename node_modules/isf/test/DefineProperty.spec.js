// Generated by CoffeeScript 1.7.1
(function() {
  var DefineProperty, IS, Object, chai,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  IS = require("./../lib/isf.js");

  chai = require("chai");

  DefineProperty = IS.DefineProperty;

  Object = IS.Object.clone();

  chai.should();

  describe("DefineProperty", function() {
    it("should have the proper properties", function() {
      (typeof DefineProperty).should.not.equal("undefined");
      (typeof DefineProperty).should.equal("function");
      (typeof DefineProperty.extend).should.equal("object");
      return (typeof DefineProperty.extend).should.not.equal("undefined");
    });
    it("should have the proper extend functions", function() {
      (typeof DefineProperty.extend.define).should.not.equal("undefined");
      (typeof DefineProperty.extend.define).should.equal("function");
      (typeof DefineProperty.extend.defineSetter).should.not.equal("undefined");
      (typeof DefineProperty.extend.defineSetter).should.equal("function");
      (typeof DefineProperty.extend.defineGetter).should.not.equal("undefined");
      return (typeof DefineProperty.extend.defineGetter).should.equal("function");
    });
    it("should do basic getter", function() {
      var o;
      o = {};
      DefineProperty("name", (function() {
        return "My Name";
      }), null, o);
      (typeof o.name).should.equal("string");
      return o.name.should.equal("My Name");
    });
    it("should do basic setter", function() {
      var o;
      o = {
        _name: "John"
      };
      DefineProperty("name", (function() {
        return o._name;
      }), (function(name) {
        return o._name = name;
      }), o);
      o.name.should.equal("John");
      o.name = "Matt";
      (typeof o.name).should.equal("string");
      return o.name.should.equal("Matt");
    });
    it("should work while including", function() {
      var NEW_OBJECT, obj;
      NEW_OBJECT = (function(_super) {
        __extends(NEW_OBJECT, _super);

        NEW_OBJECT.extend(DefineProperty.extend);

        function NEW_OBJECT() {
          this._name = "John";
          this._surname = "Malcom";
        }

        NEW_OBJECT.defineGetter("name", function() {
          return this._name;
        });

        NEW_OBJECT.defineSetter("name", function(name) {
          return this._name = name;
        });

        NEW_OBJECT.defineGetter("surname", function() {
          return this._surname;
        });

        NEW_OBJECT.defineSetter("surname", function(name) {
          return this._surname = name;
        });

        NEW_OBJECT.define("fullname", (function() {
          return "" + this._name + " " + this._surname;
        }), (function(name) {
          var _ref;
          return _ref = name.split(" "), this._name = _ref[0], this._surname = _ref[1], _ref;
        }));

        return NEW_OBJECT;

      })(Object);
      obj = new NEW_OBJECT();
      (typeof obj.name).should.not.equal("undefined");
      (typeof obj.name).should.equal("string");
      (typeof obj.surname).should.not.equal("undefined");
      (typeof obj.surname).should.equal("string");
      (typeof obj.fullname).should.not.equal("undefined");
      (typeof obj.fullname).should.equal("string");
      obj.name.should.equal("John");
      obj.surname.should.equal("Malcom");
      obj.fullname.should.equal("John Malcom");
      obj.name = "Matt";
      obj.name.should.equal("Matt");
      obj.surname = "Someone";
      obj.surname.should.equal("Someone");
      obj.fullname = "John Malcom";
      obj.name.should.equal("John");
      obj.surname.should.equal("Malcom");
      return obj.fullname.should.equal("John Malcom");
    });
    return it("should work while extending", function() {
      var NEW_NEW_OBJECT;
      NEW_NEW_OBJECT = (function(_super) {
        __extends(NEW_NEW_OBJECT, _super);

        function NEW_NEW_OBJECT() {
          return NEW_NEW_OBJECT.__super__.constructor.apply(this, arguments);
        }

        NEW_NEW_OBJECT.extend(DefineProperty.extend);

        NEW_NEW_OBJECT._name = "John";

        NEW_NEW_OBJECT.defineGetter("sname", (function() {
          return this._name;
        }), NEW_NEW_OBJECT);

        NEW_NEW_OBJECT.defineSetter("sname", (function(name) {
          return this._name = name;
        }), NEW_NEW_OBJECT);

        return NEW_NEW_OBJECT;

      })(Object);
      (typeof NEW_NEW_OBJECT.sname).should.not.equal("undefined");
      (typeof NEW_NEW_OBJECT.sname).should.equal("string");
      NEW_NEW_OBJECT.sname.should.equal("John");
      NEW_NEW_OBJECT.sname = "Matt";
      return NEW_NEW_OBJECT.sname.should.equal("Matt");
    });
  });

}).call(this);
